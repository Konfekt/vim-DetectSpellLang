              DetectSpellLang: autodetect the spellcheck-language
                                        *DetectSpellLang* *detectspelllang*

===========================================================================

0. Introduction ~
                            *DetectSpellLang-intro* *detectspelllang-intro*

This Vim plug-in autodetects the tongue (= `&spelllang`) of the text in a
buffer (if it is spell checked, that is, `&spell` is set, and `&spelllang` has
not been explicitly set, say by a modeline :help modeline).

It uses either the spell checker aspell or hunspell (which are installed
in many Linux distributions, in Mac OS, and both available for Microsoft
Windows, where the path to its executable must be added to the `%PATH%`
environment variable).

This plug-in only operates in buffers that are spell checked, that is,
`&l:spell` is set. To ensure that certain file types, for example 'text',
'markdown' and 'mail', are spell checked, add either the line
>
  autocmd FileType text,markdown,mail setlocal spell
<
or the line
>
  setlocal spell
<
to ~/.vim/ftplugin/text.vim (respectively markdown.vim and mail.vim).

===========================================================================
2. Config ~
                          *DetectSpellLang-config* *detectspelllang-config*

- The language is detected, depending on whether aspell respectively hunspell
  is used, among those listed in g:detectspelllang_langs.aspell respectively
  g:detectspelllang_langs.hunspell. It is *empty* by default and has to be
  set by the user to a list of languages included in that of the output of the
  command aspell dicts respectively hunspell -D!

>
  let g:detectspelllang_langs = {}
  let g:detectspelllang_langs.aspell = [ 'en_US', 'de_DE', 'es', 'it' ]
<
  respectively, in case you use unspell,
>
  let g:detectspelllang_langs.hunspell = [ 'en_US', 'de_DE', 'es_ES', 'it_IT' ]
<
- The value of 'g:detectspelllang_lines' defines how many lines are tested for
  spelling mistakes by hunspell to derive the suitable spellcheck-language.
  By default
>
  let g:detectspelllang_lines = 1000
<
- The values in the dictionary 'g:detectspelllang_ftoptions' define filetype-
  dependent options for aspell respectively hunspell (to specify the filter mode, for example).
  By default
>
  let g:detectspelllang_ftoptions.aspell = {
    \ 'tex'   : ['--mode=tex', '--dont-tex-check-comments'],
    \ 'html'  : ['--mode=html'],
    \ 'nroff' : ['--mode=nroff'],
    \ 'perl'  : ['--mode=perl'],
    \ 'c'     : ['--mode=ccpp'],
    \ 'cpp'   : ['--mode=ccpp'],
    \ 'sgml'  : ['--mode=sgml'],
    \ 'xml'   : ['--mode=sgml'],
    \}
<
  and
>
  let g:detectspelllang_ftoptions.hunspell = {
    \ 'tex'   : ['-t'],
    \ 'html'  : ['-H'],
    \ 'nroff' : ['-n'],
    \ 'odt'   : ['-O'],
    \ 'xml'   : ['-X'],
    \}
<

- The value of 'g:detectspelllang_threshold' defines the percentage of spelling
  mistakes among all words below which a spellcheck-language is recognized as
  correct. For example, if
>
  let g:detectspelllang_threshold = 20
<
  and g:detectspelllang_langs.aspell = [ 'en_US', 'de_DE' ] and if less than 20%
  of all words in the buffer are spelling mistakes for 'en_US', then
  'DetectSpellLang' does not verify if the percentage of spelling mistakes for
  'de_DE' is below that for 'en_US'.

- The autocommand event
>
  User DetectSpellLangUpdate
<
  provides by the buffer-local variables b:detectspelllang_old and
  b:detectspelllang_new the previous and current value of '&l:spelllang', the
  spell-check language. This way, a user command, for example for adding and
  removing abbreviations specific to a language, can hook in.

vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl

